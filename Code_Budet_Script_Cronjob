from twilio.rest import Client
import datetime

class BudgetTracker:
    def __init__(self, income, phone_number, twilio_sid, twilio_auth_token, twilio_phone_number):
        self.income = income
        self.budget = {'Needs': 0, 'Wants': 0, 'Savings': 0}
        self.expenses = {'Needs': 0, 'Wants': 0, 'Savings': 0}
        self.alerts = []
        self.phone_number = phone_number
        self.twilio_sid = twilio_sid
        self.twilio_auth_token = twilio_auth_token
        self.twilio_phone_number = twilio_phone_number
        self.client = Client(self.twilio_sid, self.twilio_auth_token)  # Twilio client setup

    def set_budget(self, needs_percentage, wants_percentage, savings_percentage):
        if needs_percentage + wants_percentage + savings_percentage != 100:
            raise ValueError("Budget percentages must add up to 100.")
        self.budget['Needs'] = self.income * (needs_percentage / 100)
        self.budget['Wants'] = self.income * (wants_percentage / 100)
        self.budget['Savings'] = self.income * (savings_percentage / 100)
        print(f"Budget set: {self.budget}")

    def add_expense(self, category, amount):
        if category not in self.budget:
            raise ValueError("Invalid category. Choose from Needs, Wants, or Savings.")
        self.expenses[category] += amount
        self.check_alerts(category)

    def check_alerts(self, category):
        if self.expenses[category] > self.budget[category]:
            alert_message = (f"Alert: You've exceeded your {category} budget! "
                             f"Budget: ${self.budget[category]:.2f}, "
                             f"Spent: ${self.expenses[category]:.2f}")
            self.alerts.append(alert_message)
            print(alert_message)
            self.send_sms(alert_message)

    def send_sms(self, message):
        # Send SMS using Twilio
        try:
            message = self.client.messages.create(
                body=message,
                from_=self.twilio_phone_number,
                to=self.phone_number
            )
            print(f"Sent SMS: {message.sid}")
        except Exception as e:
            print(f"Failed to send SMS: {e}")

    def display_status(self):
        print("\nBudget Status:")
        for category in self.budget:
            print(f"{category}: Budget: ${self.budget[category]:.2f}, "
                  f"Spent: ${self.expenses[category]:.2f}, "
                  f"Remaining: ${self.budget[category] - self.expenses[category]:.2f}")


# Example Usage
if __name__ == "__main__":
    # Twilio credentials and phone details
    TWILIO_SID = "your_twilio_sid"
    TWILIO_AUTH_TOKEN = "your_twilio_auth_token"
    TWILIO_PHONE_NUMBER = "your_twilio_phone_number"  # Twilio phone number
    USER_PHONE_NUMBER = "user_phone_number"  # User's phone number (for SMS)

    tracker = BudgetTracker(
        income=8000, 
        phone_number=USER_PHONE_NUMBER,
        twilio_sid=TWILIO_SID, 
        twilio_auth_token=TWILIO_AUTH_TOKEN, 
        twilio_phone_number=TWILIO_PHONE_NUMBER
    )
    
    tracker.set_budget(needs_percentage=50, wants_percentage=30, savings_percentage=20)
    
    tracker.add_expense("Needs", 3000)  # Adding $3,000 to Needs
    tracker.add_expense("Wants", 2500)  # Adding $2,500 to Wants
    tracker.add_expense("Savings", 1800)  # Adding $1,800 to Savings
    
    tracker.display_status()
